#! /bin/env python
import argparse
import os
import subprocess as sp
import xml.etree.ElementTree as ET
import itertools
import solartherm.postproc

def compile_model(model_fn, model, n_proc=0):
	sp.call(['omc', '-s', '-q', '-n='+str(n_proc),
		model_fn, 'Modelica', 'SolarTherm'])
	sp.call(['make', '-f', model+'.makefile'])

def update_pars(et, pars):
	root = et.getroot()

	for k in pars:
		root.find('*ScalarVariable[@name=\''+k+'\']/*[@start]').attrib['start'] = pars[k]

def run_sim(model, args):
	sp.call(['./'+model] + args)

def analyse_results(fn):
	perf = solartherm.postproc.get_performance(fn)
	return perf

if __name__ == '__main__':
	"""
	Should make sure parameters are not final (protected), or that other
	derived parameters are final.
	For example, the internal starting level and height of an OpenTank is final
	"""
	parser = argparse.ArgumentParser()
	parser.add_argument('file',
			help='model file name')
	parser.add_argument('--nocomp', action='store_true',
			help='no compilation')
	parser.add_argument('--nosim', action='store_true',
			help='no simulation')
	parser.add_argument('--start', nargs=1, type=str, default=['0'],
			help='simulation start time')
	parser.add_argument('--stop', nargs=1, type=str, default=['86400'], # 1 day
			help='simulation stop time')
	parser.add_argument('--step', nargs=1, type=str, default=['60'],
			help='simulation time step')
	parser.add_argument('par', metavar='P', type=str, nargs='*',
			help='parameters')
	args = parser.parse_args()

	sim_args = [
		'-override', 'startTime='+args.start[0]+',stopTime='+args.stop[0]
			+',stepSize='+args.step[0],
		'-s', 'rungekutta', # not sure if multiple take last instance?
		]

	fn = args.file
	model = os.path.splitext(os.path.split(fn)[1])[0]

	par_n = [] # names
	par_v = [] # values
	for pp in args.par:
		k, v = pp.split('=')
		par_n.append(k)
		par_v.append(v.split(','))
	
	if not args.nocomp:
		compile_model(fn, model)

	init_fns = []
	init_log_fn = model+'_init.log'
	f_ilog = open(init_log_fn, 'w')
	f_ilog.write(','.join(['index']+par_n) + '\n')
	#et = ET.parse(os.path.splitext(fn)[0]+'_init.xml')
	et = ET.parse(model+'_init.xml')
	for i, val in enumerate(itertools.product(*par_v)):
		pars = dict(zip(par_n, val))
		update_pars(et, pars)
		init_fn = model+'_init_'+str(i)+'.xml'
		et.write(init_fn)
		init_fns.append(init_fn)
		f_ilog.write(','.join([str(i)]+list(val)) + '\n')

	if not args.nosim:
		mat_fn = model + '_res.mat'
		perf = []
		for init_fn in init_fns:
			run_sim(model, sim_args + ['-f', init_fn])
			perf.append(analyse_results(mat_fn))
		perf_names = ['epy (MWh/year)', 'capf (%)', 'lcoe ($/MWh)', 'srev ($)']
		print(','.join(['index']+perf_names))
		for i, p in enumerate(perf):
			print(','.join([str(i)]+list(str(p[k]) for k in perf_names)))

	# Should be able to pass on any command line arguments to executable
	# Can just generate xml
	# Can save separate results file
	# Pull together relevant results
