#! /bin/env python

import argparse

import DyMat

def res_plot_matplotlib(fn, var, xlim, out=None):
	# Poor performance
	import matplotlib
	#print(matplotlib.get_backend())
	# Default QT5Agg is slow
	matplotlib.use('QT4Agg')
	#matplotlib.use('GTKAgg')
	#matplotlib.use('GTK')
	#matplotlib.use('TkAgg')
	#matplotlib.use('QT5Agg')
	#matplotlib.use('GTKCairo') # fails to draw long paths
	import matplotlib.pyplot as plt

	mat = DyMat.DyMatFile(fn)

	fig = plt.figure()

	co = ['b', 'g', 'r', 'c', 'm', 'y', 'k']

	nsp = len(var)
	for i_sp, v_sp in enumerate(var):
		sp = fig.add_subplot(nsp, 1, i_sp+1)
		v_ys = v_sp.split(':')
		assert len(v_ys) < 3, 'Can only utilise at most 2 y-axes per subplot'
		ax = [sp]
		for i in range(1,len(v_ys)):
			ax.append(sp.twinx())
		pos = [0 for i in range(max(2, len(v_ys)))]
		pos[0] = 2
		pos[1] = 1
		v_id = 0
		for i_ax, v_y in enumerate(v_ys):
			for v in v_y.split(','):
				ax[i_ax].plot(mat.abscissa(v, valuesOnly=True), mat.data(v),
						label=v, color=co[v_id%len(co)])
				v_id += 1
			ax[i_ax].legend(loc=pos[i_ax])
		if xlim != []:
			sp.set_xlim(xlim)
	plt.tight_layout()
	if not out is None:
		fig.savefig(out)
	else:
		plt.show()

def res_plot_bokeh(fn, var):
	# Too slow
	from bokeh.plotting import figure, output_file, show

	output_file('output.html', title='OM Results')

	mat = DyMat.DyMatFile(fn)

	fig = figure(title='Results', x_axis_label='time (s)')

	fig.line(mat.abscissa('tnk.E'), mat.data('tnk.E'))

	show(fig)

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('file',
			help='result mat-file to read')
	parser.add_argument('-n', '--names', action='store_true',
			help='print out variable names and exit')
	parser.add_argument('-o', '--outfile',  nargs=1, type=str, default=[None],
			help='save figure to outfile instead of displaying')
	parser.add_argument('--xlim', nargs=2, type=float,
			help='domain of x axis')
	parser.add_argument('var', metavar='V', type=str, nargs='*',
			help='v1,v2:v3 v4:v5 ...')
	args = parser.parse_args()

	fn = args.file
	if args.names:
		mat = DyMat.DyMatFile(fn)
		print(sorted(str(n) for n in mat.names()))
	else:
		res_plot_matplotlib(fn, args.var, args.xlim, args.outfile[0])
		#res_plot_bokeh(fn, args.var)

# example call:
# st_plotmat EnergySystem_res.mat 'tnk.E:der(tnk.E)' 'pmp.frac'
