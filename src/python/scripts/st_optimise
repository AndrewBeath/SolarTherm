#! /bin/env python
from __future__ import division
import argparse
import os
import subprocess as sp
import xml.etree.ElementTree as ET
import functools
import solartherm.postproc

try:
	from scipy import optimize as sciopt
except ImportError:
	sciopt = None
try:
	from pyswarm import pso
except ImportError:
	pso = None
try:
	import cma
except ImportError:
	cma = None

def update_pars(et, par_n, par_v):
	root = et.getroot()

	for i, n in enumerate(par_n):
		root.find('*ScalarVariable[@name=\''+n+'\']/*[@start]').attrib['start'] = par_v[i]

def run_sim(model, args):
	sp.call(['./'+model] + args)

def analyse_results(fn):
	perf = solartherm.postproc.get_performance(fn)
	return perf

def cost_function(model, ini_fn, mat_fn, sim_args, et, verb, scale, offset,
		cost_n, par_n, par_val):
	par_v = [str(v*scale[i] + offset[i]) for i, v in enumerate(par_val)]
	update_pars(et, par_n, par_v)
	et.write(ini_fn)
	run_sim(model, sim_args + ['-f', ini_fn])
	perf = analyse_results(mat_fn)

	if verb:
		print(par_v)
		print(perf[cost_n])

	return perf[cost_n]

if __name__ == '__main__':
	"""
	Should make sure parameters are not final (protected), or that other
	derived parameters are final.
	"""
	parser = argparse.ArgumentParser()
	parser.add_argument('file',
			help='model file name')
	parser.add_argument('--start', nargs=1, type=str, default=['0'],
			help='simulation start time')
	parser.add_argument('--stop', nargs=1, type=str, default=['86400'], # 1 day
			help='simulation stop time')
	parser.add_argument('--step', nargs=1, type=str, default=['60'],
			help='simulation time step')
	parser.add_argument('--method', nargs=1, type=str, default=['Nelder-Mead'],
			help='cma, pso or one of the scipy optimisation methods')
	parser.add_argument('--maxiter', nargs=1, type=int, default=[20],
			help='maximum number of iterations (not necessarily number of simulations)')
	parser.add_argument('--cost', nargs=1, type=str, default=['lcoe ($/MWh)'],
			help='quantity to minimise (produced by post processing)')
	parser.add_argument('-v', action='store_true',
			help='verbose printing of simulator calls')
	parser.add_argument('par', metavar='P', type=str, nargs='*',
			help='parameters with bounds and optional starting value')
	args = parser.parse_args()

	sim_args = [
		'-override', 'startTime='+args.start[0]+',stopTime='+args.stop[0]
			+',stepSize='+args.step[0],
		'-s', 'rungekutta', # not sure if multiple take last instance?
		]

	fn = args.file
	model = os.path.splitext(os.path.split(fn)[1])[0]

	par_n = [] # names
	par_b = [] # bounds
	par_0 = [] # start
	offset = []
	scale = []
	# Don't need bounds (pass None for variable to minimize)
	for pp in args.par:
		k, v = pp.split('=')
		par_n.append(k)
		vals = v.split(',')
		assert len(vals) >= 2, 'Expected parameter bounds + optional start value'
		lb = float(vals[0])
		ub = float(vals[1])
		assert lb <= ub, 'Lower bound greater than upper bound'
		#par_b.append([lb, ub])
		p0 = (ub - lb)/2
		if len(vals) == 3:
			p0 = float(vals[2])
		#par_0.append(p0)
		offset.append(lb)
		scale.append((ub - lb))
		par_b.append([0, 1])
		par_0.append((p0 - lb)/(ub - lb))

	ini_fn = model + '_init_opt.xml'
	mat_fn = model + '_res.mat'

	et = ET.parse(model + '_init.xml')

	cfunc = functools.partial(cost_function, model, ini_fn, mat_fn, sim_args,
				et, args.v, scale, offset, args.cost[0], par_n)

	print(par_n)
	if args.method[0] == 'pso':
		assert pso is not None, 'Library for pso is not installed'
		swarmsize=5
		lb = [v[0] for v in par_b]
		ub = [v[1] for v in par_b]
		res = pso(cfunc, lb, ub, maxiter=args.maxiter[0], swarmsize=5)
		cand = [scale[i]*v + offset[i] for i, v in enumerate(res[0])]
		print(cand)
		print(res[1])
	elif args.method[0] == 'cma':
		assert cma is not None, 'Library for cma is not installed'
		sigma0 = 0.2 # "step size", should be around 1/4 of search domain
		popsize = 5
		res = cma.fmin(cfunc, par_0, sigma0,
				restarts=0,
				options={
						#'maxfevals': args.maxiter[0],
						'maxiter': args.maxiter[0],
						'popsize': popsize,
				})
		cand = [scale[i]*v + offset[i] for i, v in enumerate(res[0])]
		print(cand)
		print(res[1])
	else:
		res = sciopt.minimize(cfunc, par_0, method=args.method[0], bounds=par_b,
				options={
					#'maxfev': args.maxiter[0],
					'maxiter': args.maxiter[0],
					'disp': True,
				})
		print(res)
		cand = [scale[i]*v + offset[i] for i, v in enumerate(res.x)]
		print(cand)
		print(res.fun)
