#! /bin/env python
import argparse
import os
import itertools
from solartherm import postproc
from solartherm import simulation

# TODO: Pass on any command line arguments to simulation executable
# TODO: Save separate results files
# TODO: Pull together relevant results

if __name__ == '__main__':
	"""
	Should make sure parameters are not final (protected), or that other
	derived parameters are final.
	For example, the internal starting level and height of an OpenTank is final
	"""
	parser = argparse.ArgumentParser()
	parser.add_argument('file',
			help='model file name')
	parser.add_argument('-v', action='store_true',
			help='verbose')
	parser.add_argument('--nomc', action='store_true',
			help='no model compilation')
	parser.add_argument('--nosc', action='store_true',
			help='no simulation compilation')
	parser.add_argument('--noc', action='store_true',
			help='no compilation at all (--nomc and --nosc)')
	parser.add_argument('--nosim', action='store_true',
			help='no simulation')
	parser.add_argument('--start', nargs=1, type=str, default=['0'],
			help='simulation start time: <number>[,y,d,m,s]')
	parser.add_argument('--stop', nargs=1, type=str, default=['86400'], # 1 day
			help='simulation stop time: <number>[,y,d,m,s]')
	parser.add_argument('--step', nargs=1, type=str, default=['60'],
			help='simulation time step: <number>[,y,d,m,s]')
	parser.add_argument('--plot', nargs=1, type=str, default=[],
			help='plot given quantity (at most 2 parameter dimensions)')
	parser.add_argument('--plot3d', action='store_true',
			help='plot in 3d')
	parser.add_argument('par', metavar='P', type=str, nargs='*',
			help='set or sweep parameters, e.g.: p1=val1,val2 p2=val3')
	args = parser.parse_args()

	sim = simulation.Simulator(args.file);

	if not args.noc:
		if not args.nomc:
			print('Compiling model')
			sim.compile_model()
		if not args.nosc:
			print('Compiling simulator')
			sim.compile_sim(args=([] if args.v else ['-s']))

	sim.load_init()

	dims = [] # dimensions
	par_n = [] # names
	par_v = [] # values
	for pp in args.par:
		k, v = pp.split('=')
		par_n.append(k)
		vals = [str(simulation.parse_var_val(vv, sim.get_unit(k)))
			for vv in v.split(',')]
		par_v.append(vals)

		if len(vals) >= 2:
			dims.append(len(par_n) - 1)

	mat_fn = sim.model + '_res.mat'
	perf_names = [n + ' (' + u + ')' for n, u in
			zip(postproc.SimResult.perf_n, postproc.SimResult.perf_u)]

	if not args.nosim:
		print('Starting simulation')
		print(','.join(['index']+perf_names))

	f_ilog = open(sim.model+'_init.log', 'w')
	f_ilog.write(','.join(['index']+par_n) + '\n')
	var_vals = []
	perfs = []
	for i, val in enumerate(itertools.product(*par_v)):
		var_vals.append(val)
		sim.suffix = str(i)
		sim.update_pars(par_n, val)
		f_ilog.write(','.join([sim.suffix]+list(val)) + '\n')

		if not args.nosim:
			sim.simulate(start=args.start[0], stop=args.stop[0],
					step=args.step[0])
			res = postproc.SimResult(mat_fn)
			perf = res.calc_perf()
			print(','.join([str(i)]+list(str(perf[j])
				for j, n in enumerate(perf_names))))
			perfs.append(perf)

	if len(args.plot) > 0:
		from solartherm import plotting
		ys = []
		ylabels = []
		for name in args.plot[0].split(','):
			try:
				pei = postproc.SimResult.perf_n.index(name)
			except ValueError:
				raise ValueError('Value to plot should be one of '
						+ str(postproc.SimResult.perf_n))
			ys.append([p[pei] for p in perfs])
			ylabels.append(name + ' (' + postproc.SimResult.perf_u[pei] + ')')
		if len(dims) == 1:
			x1 = [v[dims[0]] for v in var_vals]
			xlabel = par_n[dims[0]] + ' (' + sim.get_unit(par_n[dims[0]]) + ')'
			plotting.plot_par1(x1, ys, xlabel=xlabel, ylabels=ylabels)
		elif len(dims) == 2 and not args.plot3d:
			x1 = [v[dims[0]] for v in var_vals]
			x2 = [v[dims[1]] for v in var_vals]
			x1label = par_n[dims[0]] + ' (' + sim.get_unit(par_n[dims[0]]) + ')'
			x2label = par_n[dims[1]] + ' (' + sim.get_unit(par_n[dims[1]]) + ')'
			plotting.plot_par2(x1, x2, ys, x1label=x1label, x2label=x2label,
					ylabels=ylabels)
		elif len(dims) == 2 and args.plot3d:
			x1 = [float(v[dims[0]]) for v in var_vals]
			x2 = [float(v[dims[1]]) for v in var_vals]
			x1label = par_n[dims[0]] + ' (' + sim.get_unit(par_n[dims[0]]) + ')'
			x2label = par_n[dims[1]] + ' (' + sim.get_unit(par_n[dims[1]]) + ')'
			plotting.plot_3d(x1, x2, ys[0], xlabel=x1label, ylabel=x2label,
					zlabel=ylabels[0])
		else:
			print('Cannot plot problem with ' + str(len(dims)) + ' dimensions')

