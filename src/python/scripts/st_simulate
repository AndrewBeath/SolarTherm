#! /bin/env python
import argparse
import os
import itertools
from solartherm import postproc
from solartherm import simulation

# TODO: Should be able to pass on any command line arguments to executable
# TODO: Can save separate results file
# TODO: Pull together relevant results

if __name__ == '__main__':
	"""
	Should make sure parameters are not final (protected), or that other
	derived parameters are final.
	For example, the internal starting level and height of an OpenTank is final
	"""
	parser = argparse.ArgumentParser()
	parser.add_argument('file',
			help='model file name')
	parser.add_argument('-v', action='store_true',
			help='verbose')
	parser.add_argument('--nomc', action='store_true',
			help='no model compilation')
	parser.add_argument('--nosc', action='store_true',
			help='no simulation compilation')
	parser.add_argument('--noc', action='store_true',
			help='no compilation at all (--nomc and --nosc)')
	parser.add_argument('--nosim', action='store_true',
			help='no simulation')
	parser.add_argument('--start', nargs=1, type=str, default=['0'],
			help='simulation start time: <number>[,y,d,m,s]')
	parser.add_argument('--stop', nargs=1, type=str, default=['86400'], # 1 day
			help='simulation stop time: <number>[,y,d,m,s]')
	parser.add_argument('--step', nargs=1, type=str, default=['60'],
			help='simulation time step: <number>[,y,d,m,s]')
	parser.add_argument('par', metavar='P', type=str, nargs='*',
			help='set or sweep parameters, e.g.: p1=val1,val2 p2=val3')
	args = parser.parse_args()

	sim = simulation.Simulator(args.file);

	if not args.noc:
		if not args.nomc:
			print('Compiling model')
			sim.compile_model()
		if not args.nosc:
			print('Compiling simulator')
			sim.compile_sim(args=([] if args.v else ['-s']))

	par_n = [] # names
	par_v = [] # values
	for pp in args.par:
		k, v = pp.split('=')
		par_n.append(k)
		par_v.append(v.split(','))

	mat_fn = sim.model + '_res.mat'
	#perf_names = ['epy (MWh/year)', 'capf (%)', 'lcoe ($/MWh)', 'srev ($)']
	perf_names = [n + ' (' + u + ')' for n, u in
			zip(postproc.SimResult.perf_n, postproc.SimResult.perf_u)]

	if not args.nosim:
		print('Starting simulation')
		print(','.join(['index']+perf_names))

	sim.load_init()
	f_ilog = open(sim.model+'_init.log', 'w')
	f_ilog.write(','.join(['index']+par_n) + '\n')
	perf = []
	for i, val in enumerate(itertools.product(*par_v)):
		sim.suffix = str(i)
		sim.update_pars(par_n, val)
		f_ilog.write(','.join([sim.suffix]+list(val)) + '\n')

		if not args.nosim:
			sim.simulate(start=args.start[0], stop=args.stop[0],
					step=args.step[0])
			res = postproc.SimResult(mat_fn)
			perf = res.calc_perf()
			print(','.join([str(i)]+list(str(perf[j])
				for j, n in enumerate(perf_names))))

